// Code generated by protoc-gen-gogo.
// source: clawserver/service.proto
// DO NOT EDIT!

/*
Package clawserver is a generated protocol buffer package.

It is generated from these files:
	clawserver/service.proto

It has these top-level messages:
	SetClawStateRequest
	SetClawStateResponse
*/
package clawserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import motor "pitronics/claw/motor"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type SetClawStateRequest struct {
	MotorStates []motor.State `protobuf:"varint,1,rep,name=motor_states,json=motorStates,enum=motor.State" json:"motor_states,omitempty"`
}

func (m *SetClawStateRequest) Reset()                    { *m = SetClawStateRequest{} }
func (m *SetClawStateRequest) String() string            { return proto.CompactTextString(m) }
func (*SetClawStateRequest) ProtoMessage()               {}
func (*SetClawStateRequest) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{0} }

type SetClawStateResponse struct {
}

func (m *SetClawStateResponse) Reset()                    { *m = SetClawStateResponse{} }
func (m *SetClawStateResponse) String() string            { return proto.CompactTextString(m) }
func (*SetClawStateResponse) ProtoMessage()               {}
func (*SetClawStateResponse) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{1} }

func init() {
	proto.RegisterType((*SetClawStateRequest)(nil), "clawserver.SetClawStateRequest")
	proto.RegisterType((*SetClawStateResponse)(nil), "clawserver.SetClawStateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for ClawService service

type ClawServiceClient interface {
	// SetClawState sets the motor state for each of the claw motors.
	SetClawState(ctx context.Context, opts ...grpc.CallOption) (ClawService_SetClawStateClient, error)
}

type clawServiceClient struct {
	cc *grpc.ClientConn
}

func NewClawServiceClient(cc *grpc.ClientConn) ClawServiceClient {
	return &clawServiceClient{cc}
}

func (c *clawServiceClient) SetClawState(ctx context.Context, opts ...grpc.CallOption) (ClawService_SetClawStateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClawService_serviceDesc.Streams[0], c.cc, "/clawserver.ClawService/SetClawState", opts...)
	if err != nil {
		return nil, err
	}
	x := &clawServiceSetClawStateClient{stream}
	return x, nil
}

type ClawService_SetClawStateClient interface {
	Send(*SetClawStateRequest) error
	CloseAndRecv() (*SetClawStateResponse, error)
	grpc.ClientStream
}

type clawServiceSetClawStateClient struct {
	grpc.ClientStream
}

func (x *clawServiceSetClawStateClient) Send(m *SetClawStateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clawServiceSetClawStateClient) CloseAndRecv() (*SetClawStateResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SetClawStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ClawService service

type ClawServiceServer interface {
	// SetClawState sets the motor state for each of the claw motors.
	SetClawState(ClawService_SetClawStateServer) error
}

func RegisterClawServiceServer(s *grpc.Server, srv ClawServiceServer) {
	s.RegisterService(&_ClawService_serviceDesc, srv)
}

func _ClawService_SetClawState_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClawServiceServer).SetClawState(&clawServiceSetClawStateServer{stream})
}

type ClawService_SetClawStateServer interface {
	SendAndClose(*SetClawStateResponse) error
	Recv() (*SetClawStateRequest, error)
	grpc.ServerStream
}

type clawServiceSetClawStateServer struct {
	grpc.ServerStream
}

func (x *clawServiceSetClawStateServer) SendAndClose(m *SetClawStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clawServiceSetClawStateServer) Recv() (*SetClawStateRequest, error) {
	m := new(SetClawStateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ClawService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clawserver.ClawService",
	HandlerType: (*ClawServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SetClawState",
			Handler:       _ClawService_SetClawState_Handler,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptorService,
}

func (m *SetClawStateRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SetClawStateRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MotorStates) > 0 {
		for _, num := range m.MotorStates {
			data[i] = 0x8
			i++
			i = encodeVarintService(data, i, uint64(num))
		}
	}
	return i, nil
}

func (m *SetClawStateResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SetClawStateResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64Service(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Service(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintService(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *SetClawStateRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.MotorStates) > 0 {
		for _, e := range m.MotorStates {
			n += 1 + sovService(uint64(e))
		}
	}
	return n
}

func (m *SetClawStateResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SetClawStateRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetClawStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetClawStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MotorStates", wireType)
			}
			var v motor.State
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (motor.State(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MotorStates = append(m.MotorStates, v)
		default:
			iNdEx = preIndex
			skippy, err := skipService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetClawStateResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetClawStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetClawStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorService = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0x48, 0xce, 0x49, 0x2c,
	0x2f, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x07, 0x51, 0x99, 0xc9, 0xa9, 0x7a, 0x05, 0x45, 0xf9,
	0x25, 0xf9, 0x42, 0x5c, 0x08, 0x19, 0x29, 0x85, 0x82, 0xcc, 0x92, 0xa2, 0xfc, 0xbc, 0xcc, 0xe4,
	0x62, 0x7d, 0x90, 0xa8, 0x7e, 0x2e, 0x50, 0x41, 0x11, 0x84, 0x84, 0xa8, 0x56, 0x72, 0xe3, 0x12,
	0x0e, 0x4e, 0x2d, 0x71, 0x06, 0x4a, 0x06, 0x97, 0x24, 0x96, 0xa4, 0x06, 0xa5, 0x16, 0x96, 0xa6,
	0x16, 0x97, 0x08, 0xe9, 0x73, 0xf1, 0x80, 0x55, 0xc5, 0x17, 0x83, 0x44, 0x8b, 0x25, 0x18, 0x15,
	0x98, 0x35, 0xf8, 0x8c, 0x78, 0xf4, 0x20, 0x5a, 0x21, 0x4a, 0xb9, 0xc1, 0x1c, 0x30, 0xbb, 0x58,
	0x49, 0x8c, 0x4b, 0x04, 0xd5, 0x9c, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0xa3, 0x24, 0x2e, 0x6e,
	0xb0, 0x20, 0xc4, 0x89, 0x42, 0xc1, 0x5c, 0x3c, 0xc8, 0xca, 0x84, 0xe4, 0xf5, 0x10, 0xae, 0xd5,
	0xc3, 0xe2, 0x10, 0x29, 0x05, 0xdc, 0x0a, 0x20, 0x36, 0x68, 0x30, 0x3a, 0x09, 0x9c, 0x78, 0x24,
	0xc7, 0x78, 0x01, 0x88, 0x1f, 0x00, 0xf1, 0x8c, 0xc7, 0x72, 0x0c, 0x49, 0x6c, 0x60, 0xcf, 0x19,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x75, 0x3b, 0x8e, 0x30, 0x26, 0x01, 0x00, 0x00,
}
