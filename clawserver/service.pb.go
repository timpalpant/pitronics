// Code generated by protoc-gen-go.
// source: clawserver/service.proto
// DO NOT EDIT!

/*
Package clawserver is a generated protocol buffer package.

It is generated from these files:
	clawserver/service.proto

It has these top-level messages:
	SetClawStateRequest
	SetClawStateResponse
*/
package clawserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import motor "pitronics/claw/motor"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SetClawStateRequest struct {
	MotorStates []motor.State `protobuf:"varint,1,rep,packed,name=motor_states,json=motorStates,enum=motor.State" json:"motor_states,omitempty"`
}

func (m *SetClawStateRequest) Reset()                    { *m = SetClawStateRequest{} }
func (m *SetClawStateRequest) String() string            { return proto.CompactTextString(m) }
func (*SetClawStateRequest) ProtoMessage()               {}
func (*SetClawStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SetClawStateRequest) GetMotorStates() []motor.State {
	if m != nil {
		return m.MotorStates
	}
	return nil
}

type SetClawStateResponse struct {
}

func (m *SetClawStateResponse) Reset()                    { *m = SetClawStateResponse{} }
func (m *SetClawStateResponse) String() string            { return proto.CompactTextString(m) }
func (*SetClawStateResponse) ProtoMessage()               {}
func (*SetClawStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*SetClawStateRequest)(nil), "clawserver.SetClawStateRequest")
	proto.RegisterType((*SetClawStateResponse)(nil), "clawserver.SetClawStateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ClawService service

type ClawServiceClient interface {
	// SetClawState sets the motor state for each of the claw motors.
	SetClawState(ctx context.Context, opts ...grpc.CallOption) (ClawService_SetClawStateClient, error)
}

type clawServiceClient struct {
	cc *grpc.ClientConn
}

func NewClawServiceClient(cc *grpc.ClientConn) ClawServiceClient {
	return &clawServiceClient{cc}
}

func (c *clawServiceClient) SetClawState(ctx context.Context, opts ...grpc.CallOption) (ClawService_SetClawStateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClawService_serviceDesc.Streams[0], c.cc, "/clawserver.ClawService/SetClawState", opts...)
	if err != nil {
		return nil, err
	}
	x := &clawServiceSetClawStateClient{stream}
	return x, nil
}

type ClawService_SetClawStateClient interface {
	Send(*SetClawStateRequest) error
	CloseAndRecv() (*SetClawStateResponse, error)
	grpc.ClientStream
}

type clawServiceSetClawStateClient struct {
	grpc.ClientStream
}

func (x *clawServiceSetClawStateClient) Send(m *SetClawStateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clawServiceSetClawStateClient) CloseAndRecv() (*SetClawStateResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SetClawStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ClawService service

type ClawServiceServer interface {
	// SetClawState sets the motor state for each of the claw motors.
	SetClawState(ClawService_SetClawStateServer) error
}

func RegisterClawServiceServer(s *grpc.Server, srv ClawServiceServer) {
	s.RegisterService(&_ClawService_serviceDesc, srv)
}

func _ClawService_SetClawState_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClawServiceServer).SetClawState(&clawServiceSetClawStateServer{stream})
}

type ClawService_SetClawStateServer interface {
	SendAndClose(*SetClawStateResponse) error
	Recv() (*SetClawStateRequest, error)
	grpc.ServerStream
}

type clawServiceSetClawStateServer struct {
	grpc.ServerStream
}

func (x *clawServiceSetClawStateServer) SendAndClose(m *SetClawStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clawServiceSetClawStateServer) Recv() (*SetClawStateRequest, error) {
	m := new(SetClawStateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ClawService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clawserver.ClawService",
	HandlerType: (*ClawServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SetClawState",
			Handler:       _ClawService_SetClawState_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "clawserver/service.proto",
}

func init() { proto.RegisterFile("clawserver/service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0x48, 0xce, 0x49, 0x2c,
	0x2f, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x07, 0x51, 0x99, 0xc9, 0xa9, 0x7a, 0x05, 0x45, 0xf9,
	0x25, 0xf9, 0x42, 0x5c, 0x08, 0x19, 0x29, 0x85, 0x82, 0xcc, 0x92, 0xa2, 0xfc, 0xbc, 0xcc, 0xe4,
	0x62, 0x7d, 0x90, 0xa8, 0x7e, 0x2e, 0x50, 0x41, 0x11, 0x84, 0x84, 0xa8, 0x56, 0x72, 0xe3, 0x12,
	0x0e, 0x4e, 0x2d, 0x71, 0x06, 0x4a, 0x06, 0x97, 0x24, 0x96, 0xa4, 0x06, 0xa5, 0x16, 0x96, 0xa6,
	0x16, 0x97, 0x08, 0xe9, 0x73, 0xf1, 0x80, 0x55, 0xc5, 0x17, 0x83, 0x44, 0x8b, 0x25, 0x18, 0x15,
	0x98, 0x35, 0xf8, 0x8c, 0x78, 0xf4, 0x20, 0x5a, 0x21, 0x4a, 0xb9, 0xc1, 0x1c, 0x30, 0xbb, 0x58,
	0x49, 0x8c, 0x4b, 0x04, 0xd5, 0x9c, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0xa3, 0x24, 0x2e, 0x6e,
	0xb0, 0x20, 0xc4, 0x89, 0x42, 0xc1, 0x5c, 0x3c, 0xc8, 0xca, 0x84, 0xe4, 0xf5, 0x10, 0xae, 0xd5,
	0xc3, 0xe2, 0x10, 0x29, 0x05, 0xdc, 0x0a, 0x20, 0x36, 0x68, 0x30, 0x26, 0xb1, 0x81, 0xbd, 0x62,
	0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x7c, 0x42, 0xac, 0x14, 0x01, 0x00, 0x00,
}
